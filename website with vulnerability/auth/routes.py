from flask import render_template, request, flash, redirect, url_for, make_response, jsonify
from app.auth.forms import LoginForm
from app.auth import authentication
from app.auth.models import User
from flask_login import login_user, logout_user, login_required, current_user
from datetime import datetime
import time
from app import csrf
from loguru import logger



@authentication.route('/')
def index():
    return render_template('home.html')


@authentication.route('/login', methods=['GET','POST'])
@csrf.exempt
def log_in_user():

    form = LoginForm()
    if form.validate_on_submit():
        start_time = datetime.now()
        user = User.query.filter_by(user_name=form.username.data).first()
        if not user:
            flash(f'Пользователя не существует или пароль не верный', category='danger')
            flash(f'Responce time: {(datetime.now() - start_time)}', category='info')
            return redirect(url_for('authentication.log_in_user'), 301)
        else:
            check = user.check_password(form.password.data)
            if check is True:
                login_user(user)
                return (redirect(url_for('authentication.homepage')))
            else:
                time.sleep(0.5)
                return '404'
    return render_template('login.html', form=form)




@authentication.route('/profile')
def homepage():
    users = User.query.all()

    return render_template('profile.html', users=users)


@authentication.route('/logout', methods=['GET'])
@login_required
def log_out_user():
    logout_user()
    return redirect(url_for('authentication.index'))



# ----------------------- security patched version ----------------------------#

@authentication.route('/login_sec', methods=['GET', 'POST'])
def log_in_user_sec():
    form = LoginForm()
    if form.validate_on_submit():
        start_time = datetime.now()
        user = User.query.filter_by(user_name=form.username.data).first()
        logger.debug(user)
        if user:
            if user.auth_count == 0:
                flash(f'Слишком частые попытки входа, поппробуйте через 24 часа', category='danger')
                return redirect(url_for('authentication.log_in_user_sec'))
        if not user or user.check_password(form.password.data) == False:
            if user:
                    wrong_auth = user.auth_count - 1
                    user.wrong_auth(id=user.id,auth_count=wrong_auth)
            # flash(f'Responce time: {(datetime.now() - start_time)}', category='info')
            flash(f'Пользователя не существует или пароль не верный', category='danger')
            return redirect(url_for('authentication.log_in_user_sec'))

        login_user(user)
        return (redirect(url_for('authentication.homepage')))

    return render_template('login_sec.html', form=form)



